{"version":3,"sources":["components/CountryListItem.js","pages/CountryListPage.js","actions/types.js","actions/index.js","containers/CountryListContainer.js","utils/helperFunctions.js","components/LoadImage.js","utils/customPropTypes.js","components/CountryCard.js","pages/CountryDetailPage.js","containers/CountryDetailContainer.js","layouts/Main.js","reducers/countriesReducer.js","reducers/index.js","utils/selectors.js","sagas/fetchApiSaga.js","sagas/index.js","containers/AppContainer.js","index.js"],"names":["CountryListItem","_ref","title","subTitle","active","handleOnClick","react_default","a","createElement","className","concat","onClick","CountryListPage","countries","selectedCountry","selectCountry","searchFieldInput","changeSearchFieldInput","type","length","value","placeholder","onChange","e","target","map","country","components_CountryListItem","key","name","region","ALL_COUNTRIES_FETCH_REQUESTED","ALL_COUNTRIES_FETCH_SUCCEEDED","SELECT_SINGLE_COUNTRY","SINGLE_COUNTRY_SUCCEEDED","REQUEST_FAILED","CHANGE_SEARCH_FIELD_INPUT","requestAllCountries","types","inputValue","CountryListContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","actions","pages_CountryListPage","arrayOfCountries","filter","toLowerCase","includes","React","Component","connect","values","countriesReducer","dispatch","bindActionCreators","assign","LoadImage","imageLoading","onImageLoad","bind","assertThisInitialized","nextProps","flag","setState","src","alt","onLoad","languagePropType","PropTypes","shape","string","isRequired","currencyPropType","code","symbol","countryPropType","capital","population","number","currencies","arrayOf","languages","CountryCard","_this$props","components_LoadImage","language","currency","i","propType","CountryDetailPage","components_CountryCard","CountryDetailContainer","pages_CountryDetailPage","countriesDetails","Main","containers_CountryListContainer","containers_CountryDetailContainer","initialState","Kenya","Nigeria","South Africa","iso639_1","iso639_2","nativeName","rootReducer","combineReducers","arguments","undefined","action","data","forEach","objectSpread","fetchData","getSingleCountry","watchFetchData","fetchAllCountries","fetch","then","response","status","Error","json","regenerator_default","wrap","_context","prev","next","sent","put","t0","error","stop","_marked","fetchSingleCountry","url","singleCountry","_singleCountry$","createCountryObject","_countriesDetails","_context2","select","_marked2","fetchFailed","console","log","_context3","takeEvery","_marked3","rootSaga","all","sagas_marked","sagaMiddleware","createSagaMiddleware","store","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","enhancers","applyMiddleware","apply","createStore","run","configureStore","AppContainer","es","layouts_Main","ReactDOM","render","containers_AppContainer","document","getElementById"],"mappings":"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","file":"static/js/main.1109470b.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst CountryListItem = ({ title, subTitle, active, handleOnClick }) => (\n  <button className={`list-group-item ${(active && 'active-list-item')}`} onClick={handleOnClick}>\n    <h4 className='list-group-item-heading'>{title}</h4>\n    <p className='list-group-item-text'>{subTitle}</p>\n  </button>\n)\n\nCountryListItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  subTitle: PropTypes.string.isRequired,\n  active: PropTypes.bool.isRequired,\n  handleOnClick: PropTypes.func.isRequired\n}\n\nexport default CountryListItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport CountryListItem from '../components/CountryListItem'\n\nconst CountryListPage = ({ countries, selectedCountry, selectCountry, searchFieldInput, changeSearchFieldInput }) => (\n  <div>\n    <div className='input-group'>\n      <span className='input-group-btn'>\n        <button className='btn btn-default' type='button'>{countries.length} Countries</button>\n      </span>\n      <input\n        type='text'\n        className='form-control'\n        value={searchFieldInput}\n        placeholder='Search...'\n        onChange={e => changeSearchFieldInput(e.target.value)}\n      />\n    </div>\n    { countries.length > 0\n      ? <div className='list-group list-scrollable'>\n        {countries.map(country => (\n          <CountryListItem\n            key={country.name}\n            title={country.name}\n            subTitle={country.region}\n            active={selectedCountry === country.name}\n            handleOnClick={() => selectCountry(country.name)}\n          />\n        )\n        )}\n      </div>\n      : <div>No Countries match the search :(</div>\n    }\n  </div>\n)\n\nCountryListPage.propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    region: PropTypes.string.isRequired\n  })).isRequired,\n  selectedCountry: PropTypes.string.isRequired,\n  selectCountry: PropTypes.func.isRequired,\n  searchFieldInput: PropTypes.string.isRequired,\n  changeSearchFieldInput: PropTypes.func.isRequired\n}\n\nexport default CountryListPage\n","// action types\nexport const ALL_COUNTRIES_FETCH_REQUESTED = 'ALL_COUNTRIES_FETCH_REQUESTED'\nexport const ALL_COUNTRIES_FETCH_SUCCEEDED = 'ALL_COUNTRIES_FETCH_SUCCEEDED'\nexport const SELECT_SINGLE_COUNTRY = 'SELECT_SINGLE_COUNTRY'\nexport const SINGLE_COUNTRY_SUCCEEDED = 'SINGLE_COUNTRY_SUCCEEDED'\nexport const REQUEST_FAILED = 'REQUEST_FAILED'\nexport const CHANGE_SEARCH_FIELD_INPUT = 'CHANGE_SEARCH_FIELD_INPUT'\n","import * as types from './types'\n\nexport const requestAllCountries = () => ({\n  type: types.ALL_COUNTRIES_FETCH_REQUESTED\n})\n\nexport const selectCountry = name => ({\n  type: types.SELECT_SINGLE_COUNTRY,\n  name\n})\n\nexport const changeSearchFieldInput = inputValue => ({\n  type: types.CHANGE_SEARCH_FIELD_INPUT,\n  inputValue\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\n// components / actions\nimport CountryListPage from '../pages/CountryListPage'\nimport * as actions from '../actions'\nimport { filterCountries } from '../utils/helperFunctions'\n\nclass CountryListContainer extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n    }\n  }\n  componentWillMount () {\n    this.props.actions.requestAllCountries()\n  }\n  render () {\n    return (\n      <div>\n        { this.props.countries.length > 0\n          ? <CountryListPage\n            countries={filterCountries(this.props.countries, this.props.searchFieldInput)}\n            selectedCountry={this.props.selectedCountry}\n            selectCountry={this.props.actions.selectCountry}\n            searchFieldInput={this.props.searchFieldInput}\n            changeSearchFieldInput={this.props.actions.changeSearchFieldInput}\n          />\n          : <div>Loading Countries...</div>\n        }\n      </div>\n    )\n  }\n}\n\nCountryListContainer.propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    region: PropTypes.string.isRequired\n  })).isRequired,\n  selectedCountry: PropTypes.string.isRequired,\n  actions: PropTypes.object.isRequired,\n  searchFieldInput: PropTypes.string.isRequired\n}\n\nconst mapStateToProps = state => ({\n  // only use reducers and the data you need per container\n  countries: Object.values(state.countriesReducer.countries),\n  selectedCountry: state.countriesReducer.selectedCountry,\n  searchFieldInput: state.countriesReducer.searchFieldInput\n})\n\nconst mapDispatchToProps = dispatch => ({\n  // pass down actions as functions. child components should not do redux\n  actions: bindActionCreators(Object.assign({}, actions), dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CountryListContainer)\n","/**\n * filters an array of country objects by a search string\n * ignores case\n * @param {Object[]} arrayOfCountries\n * @param {string} searchFieldInput\n * @return {Boolean}\n */\nexport const filterCountries = (arrayOfCountries, searchFieldInput) => {\n  return arrayOfCountries.filter((country) => {\n    if (searchFieldInput === '' || country.name.toLowerCase().includes(searchFieldInput)) {\n      return true\n    }\n    return false\n  })\n}\n\n/**\n * checks if an object is empty\n * @param {Object} object\n * @return {boolean}\n */\nexport const objectIsEmpty = (object) => {\n  return Object.keys(object).length === 0 && object.constructor === Object\n}\n\n/**\n * extracts necessary information from countryObject received by api\n * the array of Objects given the API should only return one object\n * namely the country or an empty array if no country is found\n * @param {Object[]} singleCountry\n * @return {Object}\n */\nexport const createCountryObject = (singleCountry) => {\n  const { name, region, flag, languages, capital, currencies, population } = singleCountry[0]\n  return Object.assign({}, { name, region, flag, languages, capital, currencies, population })\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n// this component makes sure the flags from other countries do not stay\n// visible while the new country flag is loading\nclass LoadImage extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      imageLoading: true\n    }\n    this.onImageLoad = this.onImageLoad.bind(this)\n  }\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.flag !== this.props.flag) {\n      this.setState({ imageLoading: true })\n    }\n  }\n  onImageLoad () {\n    this.setState({ imageLoading: false })\n  }\n  render () {\n    return (\n      <img\n        src={this.props.flag}\n        alt=\"Country's Flag\"\n        className={'responsive custom-image-size ' + (this.state.imageLoading && 'not-visible')}\n        onLoad={this.onImageLoad}\n      />\n    )\n  }\n}\n\nLoadImage.propTypes = {\n  flag: PropTypes.string.isRequired\n}\n\nexport default LoadImage\n","// centralize proptypes which are used in multiple places\nimport { PropTypes } from 'prop-types'\n\nexport const languagePropType = PropTypes.shape({\n  name: PropTypes.string.isRequired\n})\n\nexport const currencyPropType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  symbol: PropTypes.string.isRequired\n})\n\nexport const countryPropType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  region: PropTypes.string.isRequired,\n  flag: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  population: PropTypes.number.isRequired,\n  currencies: PropTypes.arrayOf(currencyPropType.isRequired).isRequired,\n  languages: PropTypes.arrayOf(languagePropType.isRequired).isRequired\n})\n","import React from 'react'\nimport LoadImage from './LoadImage'\nimport { countryPropType } from '../utils/customPropTypes'\n\nclass CountryCard extends React.Component {\n  render () {\n    const { name, region, flag, languages, capital, currencies, population } = this.props\n    return (\n      <div className='thumbnail row card-background'>\n        <h2 className='text-center'>{name}</h2>\n        <LoadImage flag={flag} />\n        <div className='caption'>\n          <p className='text-center'>\n            Region: {region} -- Population: {population} -- Capital: {capital}\n          </p>\n          <hr />\n          <div className='col-xs-6'>\n            <p className='text-center'>Languages</p>\n            {languages.map(language => (\n              <div key={language.name}>\n                {language.name}\n              </div>\n            ))}\n          </div>\n          <div className='col-xs-6 left-border'>\n            <p className='text-center'>Currencies</p>\n            {currencies.map((currency, i) => (\n              <div key={currency.name}>\n                code: {currency.code} <br />\n                name: {currency.name} <br />\n                symbol: {currency.symbol}\n                {i !== currencies.length - 1 && <hr />}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nCountryCard.propType = countryPropType\n\nexport default CountryCard\n","import React from 'react'\n\n// components / utils\nimport CountryCard from '../components/CountryCard'\nimport { countryPropType } from '../utils/customPropTypes'\n\nconst CountryDetailPage = ({ selectedCountry }) => (\n  <CountryCard\n    name={selectedCountry.name}\n    region={selectedCountry.region}\n    flag={selectedCountry.flag}\n    languages={selectedCountry.languages}\n    capital={selectedCountry.capital}\n    currencies={selectedCountry.currencies}\n    population={selectedCountry.population}\n  />\n)\n\nCountryDetailPage.propTypes = {\n  selectedCountry: countryPropType.isRequired\n}\n\nexport default CountryDetailPage\n","import React from 'react'\nimport { connect } from 'react-redux'\n\n// components / utils\nimport CountryDetailPage from '../pages/CountryDetailPage'\nimport { countryPropType } from '../utils/customPropTypes'\n\nclass CountryDetailContainer extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n    }\n  }\n  render () {\n    return (\n      <div className='card'>\n        {\n          !this.props.selectedCountry\n            ? <div>Select a country to get more information!</div>\n            : <CountryDetailPage selectedCountry={this.props.selectedCountry} />\n        }\n      </div>\n    )\n  }\n}\n\nCountryDetailContainer.propTypes = {\n  selectedCountry: countryPropType.isRequired\n}\n\nconst mapStateToProps = state => ({\n  selectedCountry: state.countriesReducer.countriesDetails[state.countriesReducer.selectedCountry]\n})\n\nexport default connect(mapStateToProps, null)(CountryDetailContainer)\n","import React from 'react'\n\n// components\nimport CountryListContainer from '../containers/CountryListContainer'\nimport CountryDetailContainer from '../containers/CountryDetailContainer'\n\nconst Main = () => (\n  <div className='container'>\n    <div className='row'>\n      <div className='col-xs-6'>\n        <CountryListContainer />\n      </div>\n      <div className='col-xs-6'>\n        <CountryDetailContainer />\n      </div>\n    </div>\n  </div>\n)\n\nexport default Main\n","import * as types from '../actions/types'\n\nconst initialState = {\n  countries: {\n    'Kenya': {\n      name: 'Kenya',\n      region: 'Africa'\n    },\n    'Nigeria': {\n      name: 'Nigeria',\n      region: 'Africa'\n    },\n    'South Africa': {\n      name: 'South Africa',\n      region: 'Africa'\n    }\n  },\n  countriesDetails: {\n    'Kenya': {\n      name: 'Kenya',\n      region: 'Africa',\n      flag: 'https://restcountries.eu/data/ken.svg',\n      languages: [\n        { iso639_1: 'en', iso639_2: 'eng', name: 'English', nativeName: 'English' },\n        { iso639_1: 'sw', iso639_2: 'swa', name: 'Swahili', nativeName: 'Kiswahili' }\n      ],\n      capital: 'Nairobi',\n      currencies: [{ code: 'KES', name: 'Kenyan shilling', symbol: 'Sh' }],\n      population: 47251000\n    }\n  },\n  selectedCountry: 'Kenya',\n  searchFieldInput: ''\n}\n\nexport default function countriesReducer (state = initialState, action) {\n  switch (action.type) {\n    case types.ALL_COUNTRIES_FETCH_SUCCEEDED:\n      const countries = {}\n      action.data.forEach(country => {\n        countries[country.name] = country\n      })\n      return {\n        ...state,\n        countries: countries\n      }\n    case types.REQUEST_FAILED:\n      return {\n        ...state\n      }\n    case types.SINGLE_COUNTRY_SUCCEEDED:\n      const country = action.data\n      const countriesDetails = { ...state.countriesDetails } // make a copy\n      countriesDetails[country.name] = country\n\n      return {\n        ...state,\n        countriesDetails,\n        selectedCountry: country.name\n      }\n    case types.CHANGE_SEARCH_FIELD_INPUT:\n      return {\n        ...state,\n        searchFieldInput: action.inputValue\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport countriesReducer from './countriesReducer'\n\nconst rootReducer = combineReducers({\n  countriesReducer\n})\n\nexport default rootReducer\n","export const countriesDetails = state => state.countriesReducer.countriesDetails\n","import { takeEvery, call, put, select } from 'redux-saga/effects'\nimport * as types from '../actions/types'\nimport { createCountryObject } from '../utils/helperFunctions'\nimport { countriesDetails } from '../utils/selectors'\n\n/**\n * returns all european countries from the restcountries api\n * @return {Promise}\n */\nconst fetchAllCountries = () => {\n  const url = 'https://restcountries.eu/rest/v2/region/africa?fields=name;region'\n  return fetch(url).then((response) => {\n    if (response.status !== 200) {\n      throw new Error(response.status)\n    }\n    return response.json()\n  }).then(data => data)\n}\n\n/**\n * generator function which calls fetchAllCountries and dispatches the according action\n * once fetchAllCountries returns the promise\n */\nfunction * fetchData () {\n  try {\n    const data = yield call(fetchAllCountries)\n    yield put({ type: types.ALL_COUNTRIES_FETCH_SUCCEEDED, data })\n  } catch (error) {\n    yield put({ type: types.REQUEST_FAILED, error })\n  }\n}\n\n/**\n * returns a single country from the restcountries api\n * @param {string} name\n * @return {Promise}\n */\nconst fetchSingleCountry = (name) => {\n  const url = `https://restcountries.eu/rest/v2/name/${name}`\n  return fetch(url).then((response) => {\n    if (response.status !== 200) {\n      throw new Error(response.status)\n    }\n    return response.json()\n  }).then(data => createCountryObject(data))\n}\n\n/**\n * generator function which calls fetchSingleCountry and dispatches the according action\n * once fetchSingleCountry returns the promise\n */\nfunction * getSingleCountry (action) {\n  const _countriesDetails = yield select(countriesDetails)\n  let data = _countriesDetails[action.name]\n  if (data) {\n    yield put({ type: types.SINGLE_COUNTRY_SUCCEEDED, data })\n  } else {\n    try {\n      data = yield call(fetchSingleCountry, action.name)\n      yield put({ type: types.SINGLE_COUNTRY_SUCCEEDED, data })\n    } catch (error) {\n      yield put({ type: types.REQUEST_FAILED, error })\n    }\n  }\n}\n\nconst fetchFailed = () => {\n  console.log('failed')\n}\n\n/**\n * generator function which listens to every dispatch of actions\n * and executes the respective functions\n*/\nexport default function * watchFetchData () {\n  // yield put({ type: types.SELECT_SINGLE_COUNTRY, 'name': 'Netherlands' })\n  // yield put({ type: types.ALL_COUNTRIES_FETCH_REQUESTED })\n\n  yield takeEvery(types.ALL_COUNTRIES_FETCH_REQUESTED, fetchData)\n  yield takeEvery(types.SELECT_SINGLE_COUNTRY, getSingleCountry)\n  yield takeEvery(types.REQUEST_FAILED, fetchFailed)\n}\n","import { all } from 'redux-saga/effects'\nimport watchFetchData from './fetchApiSaga'\n\n/**\n * generator function, all([..]) will make sure all functions within the array\n * are listening to actions\n * This is used here to demonstrate how to use saga with scalability in mind\n*/\nexport default function * rootSaga () {\n  yield all([\n    watchFetchData()\n  ])\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\n// components , reducers, sagas\nimport Main from '../layouts/Main'\nimport rootReducer from '../reducers'\nimport rootSaga from '../sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\n\n// initial store setup\nconst configureStore = (initialState) => {\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n  const middlewares = [sagaMiddleware]\n  const enhancers = [applyMiddleware(...middlewares)]\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n\n// create store\nconst initialState = {}\nconst store = configureStore(initialState)\n\n// wrap rest of the App in a provider\nconst AppContainer = () => (\n  <Provider store={store}>\n    <Main />\n  </Provider>\n)\n\nexport default AppContainer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport AppContainer from './containers/AppContainer'\nimport './index.css'\n\nReactDOM.render(<AppContainer />, document.getElementById('root'))\n"],"sourceRoot":""}